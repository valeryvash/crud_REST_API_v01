{
  "openapi": "3.0.3",
  "info": {
    "title": "VaSh crud_REST_API_v01",
    "description": "Here is will be an empty description for my homework app",
    "version": "1.0.0",
    "contact": {
      "name": "Valery Shestak",
      "email": "shestak.valery@gmail.com",
      "url": "https://github.com/valeryvash"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://vshestak-servlets.herokuapp.com/api/v1",
      "description": "Deployment server"
    },
    {
      "url": "localhost/api/v1",
      "description": "Test server"
    }
  ],
  "tags": [
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "event",
      "description": "Everything about events"
    },
    {
      "name": "file",
      "description": "Everything about files"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "description": "Create new one user",
        "summary": "Create new one user",
        "operationId": "addUser",
        "tags": [
          "user"
        ],
        "requestBody": {
          "description": "Create a user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "405": {
            "description": "Invalid data"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Update an existing user credentials",
        "description": "Update an existing user credentials by id",
        "operationId": "updateUser",
        "requestBody": {
          "description": "Update an existing user credentials by id. User event collection will be ignored",
          "content": {
            "application/json":{
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400":{
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "get": {
        "tags": ["user"],
        "summary": "Get all users info",
        "description": "Get users info by id",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}":{
      "get": {
        "tags": ["user"],
        "summary": "Get  user info",
        "description": "Get user info by Id",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Required user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "Delete user by id",
        "operationId": "deleteUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Existed user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json":{
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/events/": {
      "get":{
        "tags": ["event"],
        "summary": "Get all events info",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": ["event"],
        "summary": "Get event info",
        "description": "Get existed event info by id",
        "operationId": "getEventById",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Existed event id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "delete": {
        "tags": ["event"],
        "summary": "Delete event",
        "description": "Delete existed event by id",
        "operationId": "deleteEventById",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Existed event id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "Ryan"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEvents"
            }
          }
        }
      },
      "UserEvents": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 11
          },
          "timestamp": {
            "type": "string",
            "format": "date",
            "example": "Aug 13, 2022, 8:58:52 PM"
          },
          "eventType":{
            "type": "string",
            "description": "Type of event",
            "example": "DELETED",
            "default": "CREATED",
            "enum": ["CREATED", "DELETED"]
          },
          "fileId": {
            "type": "integer",
            "description": "Target file id",
            "example": 12,
            "format": "int64"
          },
          "fileName": {
            "type": "string",
            "description": "Target file name",
            "example": "some file v01-00.txt"
          },
          "filePath": {
            "type": "string",
            "description": "Target file path",
            "example": "//home/desktop"
          }
        }
      },
      "Events": {
        "$ref": "#/components/schemas/UserEvents"
      },
      "File": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 13
          },
          "name": {
            "type": "string",
            "example": "yam_v01-00.txt"
          },
          "filePath": {
            "type": "string",
            "example": "//somewhere/at/linux/os/path"
          }
        }
      },
      "ApiResponse": {

      }
    },
    "requestBodies": {
      "User": {
        "description": "User object need to be persisted",
        "content": {
          "appication/json":{
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of users",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "$ref": "#/components/schemas/User"
            }
          }
        }
      }
    }
  }
}
